classdef EnumHelper
    % Helper methods to return a .NET enum instance based on a string input
    properties (Constant, GetAccess='private') % can be used like a static constructor for static properties
        Assemblies = loadAssemblies();

        % create a dictionary that maps a .NET Enum name (with namespace)
        % to a collection of instances of its underlying .NET values
        TypeMapper = containers.Map(...
            { ...
                'Vts.ChromophoreType',...
                'Vts.ForwardSolverType', ...        
                'Vts.RandomNumberGeneratorType', ...        
                'Vts.AbsorptionWeightingType', ...        
                'Vts.PhaseFunctionType', ...        
                'Vts.MonteCarlo.DatabaseType', ...
                'Vts.MonteCarlo.VirtualBoundaryType', ...
            }, ...
            { ...
                EnumHelper.GetEnumInfo(Vts.ChromophoreType.Hb.GetType()),...
                EnumHelper.GetEnumInfo(Vts.ForwardSolverType.Nurbs.GetType()), ...        
                EnumHelper.GetEnumInfo(Vts.RandomNumberGeneratorType.MersenneTwister.GetType()), ...        
                EnumHelper.GetEnumInfo(Vts.AbsorptionWeightingType.Discrete.GetType()), ...        
                EnumHelper.GetEnumInfo(Vts.PhaseFunctionType.HenyeyGreenstein.GetType()), ...        
                EnumHelper.GetEnumInfo(Vts.MonteCarlo.DatabaseType.DiffuseReflectance.GetType()), ...
                EnumHelper.GetEnumInfo(Vts.MonteCarlo.VirtualBoundaryType.DiffuseReflectance.GetType()), ...
            });
    end
    
    % helper methods to return a .NET enum instance based on a string input
    methods (Static)  
        % return a .NET enum value from the Enum name (with namespace) and
        % value name (eg GetValueNET('Vts.ForwardSolverType', 'Nurbs'))
        function value = GetValueNET(typeName, valueName)
            info = EnumHelper.TypeMapper(typeName);   
            mapIndex = info.TypeIndexMap(valueName);
            value = info.TypeValues(mapIndex);
        end
    end
    
    methods (Static, Access='private')
        % create a makeshift dictionary capable of holding .NET values
        function info = GetEnumInfo(enumType)
            
            namesNET = System.Enum.GetNames(enumType);
            names = cell(1, namesNET.Length);
            
            for i=1:namesNET.Length
                names{i} = char(namesNET(i));
            end
            
            % get the underlying Vts.ChromophoreType values
            info.TypeValues = System.Enum.GetValues(enumType);
            
            % create a dictionary based on the chromophore name
            info.TypeIndexMap = containers.Map(names, num2cell(1:namesNET.Length));
        end       
    end    
end